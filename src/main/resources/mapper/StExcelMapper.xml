<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zxd.report.mapper.StExcelMapper" >
  <insert id="insertSelective" parameterType="com.zxd.report.model.ImIcome" >
    insert into t_income
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="KMBM != null" >
        KMBM,
      </if>
      <if test="KMMC != null" >
        KMMC,
      </if>
      <if test="AMT != null" >
        AMT,
      </if>
      <if test="SZ != null" >
        SZ,
      </if>
      <if test="GXQ != null" >
        GXQ,
      </if>
      <if test="LCQ != null" >
        LCQ,
      </if>
      <if test="DXQ != null" >
        DXQ,
      </if>
      <if test="NCX != null" >
        NCX,
      </if>
      <if test="NFX != null" >
        NFX,
      </if>
      <if test="LCX != null" >
        LCX,
      </if>
      <if test="CRX != null" >
        CRX,
      </if>
      <if test="YHX != null" >
        YHX,
      </if>
      <if test="LAX != null" >
        LAX,
      </if>
      <if test="JXX != null" >
        JXX,
      </if>
      <if test="ZXX != null" >
        ZXX,
      </if>
      <if test="GCX != null" >
        GCX,
      </if>
      <if test="TYPE != null" >
        TYPE,
      </if>
      <if test="YEAR != null" >
        YEAR,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="KMBM != null" >
        #{KMBM,jdbcType=VARCHAR},
      </if>
      <if test="KMMC != null" >
        #{KMMC,jdbcType=VARCHAR},
      </if>
      <if test="AMT != null" >
        #{AMT,jdbcType=VARCHAR},
      </if>
      <if test="SZ != null" >
        #{SZ,jdbcType=VARCHAR},
      </if>
      <if test="GXQ != null" >
        #{GXQ,jdbcType=VARCHAR},
      </if>
      <if test="LCQ != null" >
        #{LCQ,jdbcType=VARCHAR},
      </if>
      <if test="DXQ != null" >
        #{DXQ},
      </if>
      <if test="NCX != null" >
        #{NCX},
      </if>
      <if test="NFX != null" >
        #{NFX},
      </if>
      <if test="LCX != null" >
        #{LCX},
      </if>
      <if test="CRX != null" >
        #{CRX},
      </if>
      <if test="YHX != null" >
        #{YHX},
      </if>
      <if test="LAX != null" >
        #{LAX},
      </if>
      <if test="JXX != null" >
        #{JXX},
      </if>
      <if test="ZXX != null" >
        #{ZXX},
      </if>
      <if test="GCX != null" >
        #{GCX},
      </if>
      <if test="TYPE != null" >
        #{TYPE},
      </if>
      <if test="YEAR != null" >
        #{YEAR},
      </if>
    </trim>
  </insert>
  <insert id="insertSelective_batch_income" parameterType="java.util.List" >
    insert into t_income
    <trim prefix="(" suffix=")" suffixOverrides="," >
        KMBM,
        KMMC,
        AMT,
        SZ,
        GXQ,
        LCQ,
        DXQ,
        NCX,
        NFX,
        LCX,
        CRX,
        YHX,
        LAX,
        JXX,
        ZXX,
        GCX,
        TYPE,
        YEAR,
    </trim>
        VALUES
      <foreach collection="list" item="income" index="index"  separator=",">
        (
        #{income.KMBM},
        #{income.KMMC},
        #{income.AMT},
        #{income.SZ},
        #{income.GXQ},
        #{income.LCQ},
        #{income.DXQ},
        #{income.NCX},
        #{income.NFX},
        #{income.LCX},
        #{income.CRX},
        #{income.YHX},
        #{income.LAX},
        #{income.JXX},
        #{income.ZXX},
        #{income.GCX},
        #{income.TYPE},
        #{income.YEAR}
        )
      </foreach>


  </insert>
  <insert id="insertSelective_batch_disburse" parameterType="java.util.List" >
    insert into t_disburse
    <trim prefix="(" suffix=")" suffixOverrides="," >
      KMBM,
      KMMC,
      AMT,
      SZ,
      GXQ,
      LCQ,
      DXQ,
      NCX,
      NFX,
      LCX,
      CRX,
      YHX,
      LAX,
      JXX,
      ZXX,
      GCX,
      TYPE,
      YEAR,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.KMBM},
      #{income.KMMC},
      #{income.AMT},
      #{income.SZ},
      #{income.GXQ},
      #{income.LCQ},
      #{income.DXQ},
      #{income.NCX},
      #{income.NFX},
      #{income.LCX},
      #{income.CRX},
      #{income.YHX},
      #{income.LAX},
      #{income.JXX},
      #{income.ZXX},
      #{income.GCX},
      #{income.TYPE},
      #{income.YEAR}
      )
    </foreach>


  </insert>
  <select id="querybysql" parameterType="String" resultType="com.zxd.report.model.Min_11">
     ${sql}
  </select>
  <select id="selectBysql" parameterType="String" resultType="java.util.Map" >
    ${sql}
  </select>
  <select id="selectBysql2" parameterType="String" resultType="java.util.Map" >
    ${sql}
  </select>

  <delete id="deleteincome" parameterType="string">
    delete from t_income where
    <if test="date!=null">
      year= #{date}
    </if>
  </delete>
  <delete id="deletedisburse"  parameterType="string">
    delete from t_disburse where
    <if test="date!=null">
      year= #{date}
    </if>
  </delete>
  <delete id="deleteincome_area" parameterType="string">
    delete from t_incomebyarea where
    <if test="date!=null">
      year= #{date}
    </if>
  </delete>
  <delete id="deletedisburse_area"  parameterType="string">
    delete from t_disbursebyarea where
    <if test="date!=null">
      year= #{date}
    </if>
  </delete>
  <select id="selectByList" resultType="java.util.Map" parameterType="java.util.Map">
    select
    *
    from t_income
    <trim prefix="where" prefixOverrides="and|or">
      <if test="map.date !=null and map.date !=''">
         year=#{map.date}
      </if>
   </trim>
    limit #{page.start},#{page.length}
  </select>

  <select id="selectByList_count" resultType="int">
    select count(1)
    from t_income
    <trim prefix="where" prefixOverrides="and|or">
      <if test="map.date !=null and map.date !=''">
        year=#{map.date}
      </if>
    </trim>
  </select>
  <select id="selectdisburseByList_count" resultType="int">
    select count(1) from t_disburse
    <trim prefix="where" prefixOverrides="and|or">
      <if test="map.date !=null and map.date!=''">
        year=#{map.date}
      </if>
    </trim>
  </select>
  <select id="selectdisburseByList" resultType="java.util.Map" parameterType="java.util.Map">
    select
    *
    from t_disburse
    <trim prefix="where" prefixOverrides="and|or">
        <if test="map.date !=null and map.date!=''">
           year=#{map.date}
        </if>
    </trim>
    limit #{page.start},#{page.length}
  </select>

  <select id="selectByYear_ydr" resultType="java.util.Map" parameterType="java.util.Map">
    select year from t_income a group by year order by year desc
    <trim prefix="where" prefixOverrides="and|or">
      <if test="map.date !=null and map.date!=''">
        year=#{map.date}
      </if>
    </trim>

  </select>
  <select id="selectByYear_ydr_13" resultType="java.util.Map" parameterType="java.util.Map">
    select year from t_incomeByarea a group by year order by year desc
    <trim prefix="where" prefixOverrides="and|or">
      <if test="map.date !=null and map.date!=''">
        year=#{map.date}
      </if>
    </trim>

  </select>

  <insert id="insertSelective_batch_income_map" parameterType="java.util.List" >
  insert into t_income
  <trim prefix="(" suffix=")" suffixOverrides="," >
    KMBM,
    KMMC,
    AMT,
    SZ,
    GXQ,
    LCQ,
    DXQ,
    NCX,
    NFX,
    LCX,
    CRX,
    YHX,
    LAX,
    JXX,
    ZXX,
    GCX,
    TYPE,
    YEAR,
  </trim>
  VALUES
  <foreach collection="list" item="income" index="index"  separator=",">
    (
    #{income.kmbm},
    #{income.kmmc},
    #{income.amt},
    #{income.sz},
    #{income.gxq},
    #{income.lcq},
    #{income.dxq},
    #{income.ncx},
    #{income.nfx},
    #{income.lcx},
    #{income.crx},
    #{income.yhx},
    #{income.lax},
    #{income.jxx},
    #{income.zxx},
    #{income.gcx},
    #{income.type},
    #{income.year}
    )
  </foreach>


</insert>
  <insert id="insertSelective_batch_incomeBypro_map" parameterType="java.util.List" >
    insert into t_income_pro
    <trim prefix="(" suffix=")" suffixOverrides="," >
      kmbm,kmmc,amt,sbj,ncs,jdzs,pxs,jjs,xys,yts,gzs,ycs,srs,jas,wzs,type,year,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.kmbm},
      #{income.kmmc},
      #{income.amt},
      #{income.sbj},
      #{income.ncs},
      #{income.jdzs},
      #{income.pxs},
      #{income.jjs},
      #{income.xys},
      #{income.yts},
      #{income.gzs},
      #{income.ycs},
      #{income.srs},
      #{income.jas},
      #{income.wzs},
      #{income.type},
      #{income.year}
      )
    </foreach>
  </insert>
  <insert id="insertSelective_batch_incomearea_map" parameterType="java.util.List" >
    insert into t_incomebyarea
    <trim prefix="(" suffix=")" suffixOverrides="," >
      area_name,
      area_code,
      AMT,
      kmbm,
      kmmc,
      type,
      year,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.area_name},
      #{income.area_code},
      #{income.amt},
      #{income.kmbm},
      #{income.kmmc},
      #{income.type},
      #{income.year}
      )
    </foreach>


  </insert>
  <insert id="insertSelective_batch_incomeByproarea_map" parameterType="java.util.List" >
    insert into t_incomebyarea_pro
    <trim prefix="(" suffix=")" suffixOverrides="," >
      area_name,
      area_code,
      AMT,
      kmbm,
      kmmc,
      type,
      year,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.area_name},
      #{income.area_code},
      #{income.amt},
      #{income.kmbm},
      #{income.kmmc},
      #{income.type},
      #{income.year}
      )
    </foreach>


  </insert>
  <insert id="insertSelective_batch_disburse_map" parameterType="java.util.List" >
    insert into t_disburse
    <trim prefix="(" suffix=")" suffixOverrides="," >
      KMBM,
      KMMC,
      AMT,
      SZ,
      GXQ,
      LCQ,
      DXQ,
      NCX,
      NFX,
      LCX,
      CRX,
      YHX,
      LAX,
      JXX,
      ZXX,
      GCX,
      TYPE,
      YEAR,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.kmbm},
      #{income.kmmc},
      #{income.amt},
      #{income.sz},
      #{income.gxq},
      #{income.lcq},
      #{income.dxq},
      #{income.ncx},
      #{income.nfx},
      #{income.lcx},
      #{income.crx},
      #{income.yhx},
      #{income.lax},
      #{income.jxx},
      #{income.zxx},
      #{income.gcx},
      #{income.type},
      #{income.year}
      )
    </foreach>
  </insert>
  <insert id="insertSelective_batch_disbursearea_map" parameterType="java.util.List" >
    insert into t_disbursebyarea
    <trim prefix="(" suffix=")" suffixOverrides="," >
      area_name,
      area_code,
      AMT,
      kmbm,
      kmmc,
      type,
      year,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.area_name},
      #{income.area_code},
      #{income.amt},
      #{income.kmbm},
      #{income.kmmc},
      #{income.type},
      #{income.year}
      )
    </foreach>

  </insert>
  <insert id="insertSelective_batch_importHyType_map" parameterType="java.util.List" >
    insert into t_industrytax
    <trim prefix="(" suffix=")" suffixOverrides="," >
      AMT,
      kmbm,
      kmmc,
      type,
      year,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.amt},
      #{income.kmbm},
      #{income.kmmc},
      #{income.type},
      #{income.year}
      )
    </foreach>

  </insert>
  <insert id="insertSelective_expectgoal_map" parameterType="java.util.List" >
    insert into t_expectgoal
    <trim prefix="(" suffix=")" suffixOverrides="," >
      area,
      area_code,
      target_amt,
      taxdept_amt,
      financedept_amt,
      year,
    </trim>
    VALUES
    <foreach collection="list" item="income" index="index"  separator=",">
      (
      #{income.area},
      #{income.area_code},
      #{income.target_amt},
      #{income.taxdept_amt},
      #{income.financedept_amt},
      #{income.year}
      )
    </foreach>

  </insert>

  <select id="excutesql" parameterType="java.lang.String">
        ${sql}
  </select>
  <select id="cleardata" parameterType="java.lang.String" statementType="CALLABLE">
        {call cleardata()}
  </select>
  <!-- 查询13张收入表 -->
  <select id="selectByList_13" resultType="java.util.Map" parameterType="java.util.Map">
  select kmbm ,kmmc ,sum(case when year = #{map.date} and area_code='361000' then amt else 0 end) sbj,
    sum(case when year =#{map.date} and area_code='36100X' then amt else 0 end) gxq,
    sum(case when year = #{map.date} and area_code='361002' then amt else 0 end) lcq,
    sum(case when year = #{map.date} and area_code='361029' then amt else 0 end) dxq,
    sum(case when year = #{map.date} and area_code='361021' then amt else 0 end) ncx,
    sum(case when year = #{map.date} and area_code='361023' then amt else 0 end) nfx,
    sum(case when year = #{map.date} and area_code='361022' then amt else 0 end) lcx,
    sum(case when year = #{map.date} and area_code='361024' then amt else 0 end) crx,
    sum(case when year = #{map.date} and area_code='361026' then amt else 0 end) yhx,
    sum(case when year = #{map.date} and area_code='361025' then amt else 0 end) lax,
    sum(case when year = #{map.date} and area_code='361027' then amt else 0 end) jxx,
    sum(case when year = #{map.date} and area_code='361028' then amt else 0 end) zxx,
    sum(case when year = #{map.date} and area_code='361030' then amt else 0 end) gcx
    from t_incomebyarea where area_code like '36%' GROUP BY kmbm order by id
    limit #{page.start},#{page.length}
  </select>
  <select id="selectByList_count_13" resultType="int">
    select count(1) count from (select kmbm ,kmmc ,sum(case when year = #{map.date} and area_code='361000' then amt else 0 end) sbj,
    sum(case when year =#{map.date} and area_code='36100X' then amt else 0 end) gxq,
    sum(case when year = #{map.date} and area_code='361002' then amt else 0 end) lcq,
    sum(case when year = #{map.date} and area_code='361029' then amt else 0 end) dxq,
    sum(case when year = #{map.date} and area_code='361021' then amt else 0 end) ncx,
    sum(case when year = #{map.date} and area_code='361023' then amt else 0 end) nfx,
    sum(case when year = #{map.date} and area_code='361022' then amt else 0 end) lcx,
    sum(case when year = #{map.date} and area_code='361024' then amt else 0 end) crx,
    sum(case when year = #{map.date} and area_code='361026' then amt else 0 end) yhx,
    sum(case when year = #{map.date} and area_code='361025' then amt else 0 end) lax,
    sum(case when year = #{map.date} and area_code='361027' then amt else 0 end) jxx,
    sum(case when year = #{map.date} and area_code='361028' then amt else 0 end) zxx,
    sum(case when year = #{map.date} and area_code='361030' then amt else 0 end) gcx
    from t_incomebyarea where area_code like '36%' GROUP BY kmbm)p
  </select>
  <!-- 查询13张支出表 -->
  <select id="selectdisburseByList_13" resultType="java.util.Map" parameterType="java.util.Map">
  select kmbm ,kmmc ,sum(case when year = #{map.date} and area_code='361000' then amt else 0 end) sbj,
    sum(case when year =#{map.date} and area_code='36100X' then amt else 0 end) gxq,
    sum(case when year = #{map.date} and area_code='361002' then amt else 0 end) lcq,
    sum(case when year = #{map.date} and area_code='361029' then amt else 0 end) dxq,
    sum(case when year = #{map.date} and area_code='361021' then amt else 0 end) ncx,
    sum(case when year = #{map.date} and area_code='361023' then amt else 0 end) nfx,
    sum(case when year = #{map.date} and area_code='361022' then amt else 0 end) lcx,
    sum(case when year = #{map.date} and area_code='361024' then amt else 0 end) crx,
    sum(case when year = #{map.date} and area_code='361026' then amt else 0 end) yhx,
    sum(case when year = #{map.date} and area_code='361025' then amt else 0 end) lax,
    sum(case when year = #{map.date} and area_code='361027' then amt else 0 end) jxx,
    sum(case when year = #{map.date} and area_code='361028' then amt else 0 end) zxx,
    sum(case when year = #{map.date} and area_code='361030' then amt else 0 end) gcx
    from t_disbursebyarea where area_code like '36%' GROUP BY kmbm order by id
    limit #{page.start},#{page.length}
  </select>
  <select id="selectdisburseByList_count_13" resultType="int">
    select count(1) count from (select kmbm ,kmmc ,sum(case when year = #{map.date} and area_code='361000' then amt else 0 end) sbj,
    sum(case when year =#{map.date} and area_code='36100X' then amt else 0 end) gxq,
    sum(case when year = #{map.date} and area_code='361002' then amt else 0 end) lcq,
    sum(case when year = #{map.date} and area_code='361029' then amt else 0 end) dxq,
    sum(case when year = #{map.date} and area_code='361021' then amt else 0 end) ncx,
    sum(case when year = #{map.date} and area_code='361023' then amt else 0 end) nfx,
    sum(case when year = #{map.date} and area_code='361022' then amt else 0 end) lcx,
    sum(case when year = #{map.date} and area_code='361024' then amt else 0 end) crx,
    sum(case when year = #{map.date} and area_code='361026' then amt else 0 end) yhx,
    sum(case when year = #{map.date} and area_code='361025' then amt else 0 end) lax,
    sum(case when year = #{map.date} and area_code='361027' then amt else 0 end) jxx,
    sum(case when year = #{map.date} and area_code='361028' then amt else 0 end) zxx,
    sum(case when year = #{map.date} and area_code='361030' then amt else 0 end) gcx
    from t_disbursebyarea where area_code like '36%' GROUP BY kmbm)p
  </select>
</mapper>